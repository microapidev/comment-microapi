tags:
  - name: Microservice Admins
    description: |
      Manage Microservice Operations

  - name: Organizations
    description: |
      Create and manage organizations.

  - name: Admins
    description: |
      Create and manage admins.

  - name: Applications
    description: |
      Create and manage applications.

  - name: Comments and replies
    description: |
      Create and manage comments and replies.

paths:
  #Endpoints to Microservice admin Operations
  /msadmins/login:
    #Post Operation
    post:
      tags:
        - Microservice Admins

      summary: Login a Microservice Admin to get token

      requestBody:
        description: A JSON object Containing login information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string

      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      systemToken:
                        type: string
      "400":
        description: Bad request error
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ErrorResponse"

      "422":
        description: Validation error
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ErrorResponse"
  /msadmins:
    #GET Operation
    get:
      tags:
        - Microservice Admins

      summary: Get all Microservice Admins

      security:
        - Bearer: []

      parameters:
        - in: query
          $ref: "#/components/parameters/limitParam"

        - in: query
          $ref: "#/components/parameters/sortParam"

        - in: query
          $ref: "#/components/parameters/pageParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      records:
                        type: array
                        items:
                          $ref: "#/components/schemas/MsAdmin"
                      pageInfo:
                        $ref: "#/components/schemas/pageInfo"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # Patch operation
    patch:
      tags:
        - Microservice Admins

      summary: Microservice Admin Update Details

      security:
        - Bearer: []

      requestBody:
        description: A JSON object containing the MS Admin information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname:
                  type: string

      responses:
        responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      fullname:
                        type: string

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  #Endpoint to create new ms admin
  /msadmins/create:
    #POST operation
    post:
      tags:
        - Microservice Admins

      summary: Creates a new Microservice Admin

      security:
        - Bearer: []

      requestBody:
        description: A JSON object containing the MS Admin information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMSAdmin"

        responses:
          "201":
            description: Successful operation
            content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      fullname:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
          "401":
            description: Authorization Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"

          "400":
            description: Bad request error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"

          "422":
            description: Validation error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"

  #Endpoint to change password
  /msadmins/change-password:
    #POST operation
    post:
      tags:
        - Microservice Admins

      summary: Changes MS Admin Password

      security:
        - Bearer: []

      requestBody:
        description: A JSON objcet containing old and new password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string

      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /msadmins/{msAdminId}:
    #GET operation
    get:
      tags:
        - Microservice Admins

      summary: Get a single Microservice Admin

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/msAdminIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/MsAdmin"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    #delete operation
    delete:
      tags:
        - Microservice Admins

      summary: Delete a Microservice Admin

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/msAdminIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      fullname:
                        type: string
                      email:
                        type: string
                      msAdminId:
                        type: string
        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  #Endpoint to enable admin
  /msadmins/{msAdminId}/enable:
    # Patch Operation
    patch:
      tags:
        - Microservice Admins

      summary: Enables a Microservice Admin

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/msAdminIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      fullname:
                        type: string
                      email:
                        type: string

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to disable admin
  /msadmins/{msAdminId}/disable:
    # Patch Operation
    patch:
      tags:
        - Microservice Admins

      summary: Disables a Microservice Admin

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/msAdminIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      fullname:
                        type: string
                      email:
                        type: string

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to manage system settings
  /msadmins/settings:
    #Get Operation
    get:
      tags:
        - Microservice Admins

      summary: Get System settings

      security:
        - Bearer: []

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      maxRequestsPerMin:
                        type: number
                      maxItemsPerPage:
                        type: number
                      defaultItemsPerPage:
                        type: number

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags:
        - Microservice Admins

      summary: Update System settings

      security:
        - Bearer: []

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      maxRequestsPerMin:
                        type: number
                      maxItemsPerPage:
                        type: number
                      defaultItemsPerPage:
                        type: number

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoints to manage organizations using the microservice
  /msadmins/organizations:
    #Get operation
    get:
      tags:
        - Microservice Admins

      summary: Get all organization using the microservice

      security:
        - Bearer: []

      parameters:
        - in: query
          $ref: "#/components/parameters/limitParam"

        - in: query
          $ref: "#/components/parameters/sortParam"

        - in: query
          $ref: "#/components/parameters/pageParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      pageInfo:
                        $ref: "#/components/schemas/pageInfo"
                      records:
                        type: array
                        items:
                          type: object
                          properties:
                            organizationId:
                              type: string
                            organizationName:
                              type: string
                            organizationEmail:
                              type: string

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to manage organizations
  /msadmins/organizations/{organizationId}:
    #Get operation
    get:
      tags:
        - Microservice Admins

      summary: Get Single organization

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/organizationIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      organizationId:
                        type: string
                      organizationName:
                        type: string
                      organizationEmail:
                        type: string

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Microservice Admins

      summary: Delete Single organization

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/organizationIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      organizationId:
                        type: string
                      organizationName:
                        type: string

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  # Endpoint to  unblock organization
  /msadmins/organizations/{organizationId}/block:
    #Patch operation
    patch:
      tags:
        - Microservice Admins

      summary: Block Single organization

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/organizationIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      organizationId:
                        type: string
                      organizationName:
                        type: string
                      organizationEmail:
                        type: string
                      blocked:
                        type: boolean
                      blockedAt:
                        type: string
                      blockedBy:
                        type: string

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  # Endpoint to  unblock organization
  /msadmins/organizations/{organizationId}/unblock:
    #patch operation
    patch:
      tags:
        - Microservice Admins

      summary: Unblock Single organization

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/organizationIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      organizationId:
                        type: string
                      organizationName:
                        type: string
                      organizationEmail:
                        type: string
                      unblocked:
                        type: boolean
                      unblockedAt:
                        type: string
                      unblockedBy:
                        type: string

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoints to manage subscription plans
  /msadmins/plans:
    # GET Opeartion
    get:
      tags:
        - Microservice Admins

      summary: Get all subscription plans

      security:
        - Bearer: []

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Plans"
        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # POST Opeartion
    post:
      tags:
        - Microservice Admins

      summary: Create a new Plan

      security:
        - Bearer: []

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/Plans"
        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to manage single plans
  /msadmins/plans/{planId}:
    # GET Operation
    get:
      tags:
        - Microservice Admins

      summary: Get Single plan

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/planIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    $ref: "#/components/schemas/Plans"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # delete Operation
    delete:
      tags:
        - Microservice Admins

      summary: Get Single plan

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/planIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      planId:
                        type: string
                      planName:
                        type: string

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoints to manage organizations using the microservice
  /msadmins/applications:
    #Get operation
    get:
      tags:
        - Microservice Admins

      summary: Get all applications using the microservice

      security:
        - Bearer: []

      parameters:
        - in: query
          $ref: "#/components/parameters/limitParam"

        - in: query
          $ref: "#/components/parameters/sortParam"

        - in: query
          $ref: "#/components/parameters/pageParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      pageInfo:
                        $ref: "#/components/schemas/pageInfo"
                      records:
                        type: array
                        items:
                          type: object
                          properties:
                            applicationId:
                              type: string
                            applicationName:
                              type: string
                            organizationId:
                              type: string
                            organizationName:
                              type: string

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to get all subscriptions
  /msadmins/applications/subscriptions:
    #GET operation
    get:
      tags:
        - Microservice Admins

      summary: Get All Application Subscription

      security:
        - Bearer: []

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Subscriptions"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to manage organizations
  /msadmins/applications/{applicationId}:
    #Get operation
    get:
      tags:
        - Microservice Admins

      summary: Get Single Application

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/applicationIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      applicationId:
                        type: string
                      applicationName:
                        type: string
                      organizationId:
                        type: string
                      organizationName:
                        type: string

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Microservice Admins

      summary: Delete Single Application

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/applicationIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      applicationId:
                        type: string
                      applicationName:
                        type: string

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to view application log
  /msadmins/applications/{applicationId}/log:
    # Get Operation
    get:
      tags:
        - Microservice Admins

      summary: Get application logs

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/applicationIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      records:
                        type: array
                        items:
                          $ref: "#/components/schemas/Log"
                      pageInfo:
                        $ref: "#/components/schemas/pageInfo"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  # Endpoint to  unblock organization
  /msadmins/applications/{applicationId}/block:
    #Patch operation
    patch:
      tags:
        - Microservice Admins

      summary: Block Single Application

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/organizationIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      applicationId:
                        type: string
                      applicationName:
                        type: string
                      blocked:
                        type: boolean
                      blockedAt:
                        type: string
                      blockedBy:
                        type: string

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  # Endpoint to  unblock organization
  /msadmins/applications/{applicationId}/unblock:
    #patch operation
    patch:
      tags:
        - Microservice Admins

      summary: Unblock Single Application

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/applicationIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      applicationId:
                        type: string
                      applicationName:
                        type: string
                      unblocked:
                        type: boolean
                      unblockedAt:
                        type: string

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to get application subscription
  /msadmins/applications/{applicationId}/subscriptions:
    #GET operation
    get:
      tags:
        - Microservice Admins

      summary: Get Application Subscription

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/applicationIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/Subscriptions"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to create an organization
  /organizations:
    # POST operation
    post:
      tags:
        - Organizations

      summary: Creates an organization

      requestBody:
        description: A JSON object containing the organization information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrganization"

      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/OrganizationResponse"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to signin to an organization for a token
  /organizations/token:
    # POST operation
    post:
      tags:
        - Organizations

      summary: Gets an organization token after successful login

      requestBody:
        description: A JSON object containing the login information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginOrganization"

      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      organizationToken:
                        type: string

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # Endpoint to create an organization's admin
  /admins:
    # GET operation
    get:
      tags:
        - Admins

      summary: Gets all of an organization's admins

      security:
        - Bearer: []

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Admin"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # POST operation
    post:
      tags:
        - Admins

      summary: Creates an organization's admin

      security:
        - Bearer: []

      requestBody:
        description: A JSON object containing the organization's admin information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAdmin"

      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      adminId:
                        type: string

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to get, delete, or update an organization's admin
  /admins/{adminId}:
    # GET operation
    get:
      tags:
        - Admins

      summary: Gets an organization's admin

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/adminIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/Admin"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # PATCH operation
    patch:
      tags:
        - Admins

      summary: Updates an organization's admin

      security:
        - Bearer: []

      requestBody:
        description: A JSON object containing the organization's admin information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAdmin"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/Admin"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # DELETE operation
    delete:
      tags:
        - Admins

      summary: Deletes an organization's admin

      security:
        - Bearer: []

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/Admin"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to change an organization admin's password
  /admins/{adminId}/change-password:
    # PATCH operation
    patch:
      tags:
        - Admins

      summary: Updates an organization admin's password

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/adminIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      type: string
                    example: []

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to get all the organization's applications or create an organization's application
  /applications:
    # GET operation
    get:
      tags:
        - Applications

      summary: Gets all of an organization's applications

      security:
        - Bearer: []

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Application"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # POST operation
    post:
      tags:
        - Applications

      summary: Creates an organization's application

      security:
        - Bearer: []

      requestBody:
        description: A JSON object containing an organization's application information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApplication"

      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      applicationId:
                        type: string
                      applicationToken:
                        type: string

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to get, delete, or update an organization's application
  /applications/{applicationId}:
    # GET operation
    get:
      tags:
        - Applications

      summary: Gets an organization's application

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/applicationIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/Application"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # PATCH operation
    patch:
      tags:
        - Applications

      summary: Updates an organization's application

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/applicationIdParam"

      requestBody:
        description: A JSON object containing the organization's application information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateApplication"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/Application"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # DELETE operation
    delete:
      tags:
        - Applications

      summary: Deletes an organization's application

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/applicationIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/Application"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to signin to an organization for a token
  /applications/{applicationId}/token:
    # POST operation
    post:
      tags:
        - Applications

      summary: Gets an organization's application token

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/applicationIdParam"

      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      applicationToken:
                        type: string

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to get application subscription
  /applications/{applicationId}/subscriptions:
    # POST Operation
    post:
      tags:
        - Applications

      summary: Subscribes an application to a plan

      security:
        - Bearer: []

      requestBody:
        description: A JSON object containing an subscription Plan ID and Period Count
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Subscribe"
    #GET operation
    get:
      tags:
        - Applications

      summary: Get Application Subscription

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/applicationIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/Subscriptions"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authorization Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to get request logs
  /applications/{applicationId}/log:
    # Get Operation
    get:
      tags:
        - Applications

      summary: Get application logs

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/applicationIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      records:
                        type: array
                        items:
                          $ref: "#/components/schemas/Log"
                      pageInfo:
                        $ref: "#/components/schemas/pageInfo"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to get all comments or create a comment
  /comments:
    # GET operation
    get:
      tags:
        - Comments and replies

      summary: Gets all comments

      security:
        - Bearer: []

      parameters:
        - in: query
          $ref: "#/components/parameters/isFlaggedParam"

        - in: query
          $ref: "#/components/parameters/refIdParam"

        - in: query
          $ref: "#/components/parameters/ownerIdParam"

        - in: query
          $ref: "#/components/parameters/originParam"

        - in: query
          $ref: "#/components/parameters/limitParam"

        - in: query
          $ref: "#/components/parameters/sortParam"

        - in: query
          $ref: "#/components/parameters/pageParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      records:
                        type: array
                        items:
                          $ref: "#/components/schemas/Comment"
                      pageInfo:
                        $ref: "#/components/schemas/pageInfo"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # POST operation
    post:
      tags:
        - Comments and replies

      summary: Creates a new comment

      security:
        - Bearer: []

      requestBody:
        description: A JSON object containing the comment information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateComment"

      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/Comment"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to update or delete a comment
  /comments/{commentId}:
    # GET operation
    get:
      tags:
        - Comments and replies

      summary: Gets a comment

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/commentIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/Comment"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # PATCH operation
    patch:
      tags:
        - Comments and replies

      summary: Updates a comment

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/commentIdParam"

      requestBody:
        description: A JSON object containing the comment information to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateComment"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/UpdateComment"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # DELETE operation
    delete:
      tags:
        - Comments and replies

      summary: Deletes a comment

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/commentIdParam"

      requestBody:
        description: A JSON object containing the ID of the comment owner
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteComment"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/Comment"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to get all votes of a comment
  /comments/{commentId}/votes:
    # GET operation
    get:
      tags:
        - Comments and replies

      summary: Gets all the votes of a comment

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/commentIdParam"

        - in: path
          $ref: "#/components/parameters/voteTypeParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      commentId:
                        type: string
                      votes:
                        type: array
                        items:
                          type: string

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to update upvotes on a comment
  /comments/{commentId}/votes/upvote:
    # PATCH operation
    patch:
      tags:
        - Comments and replies

      summary: Updates the upvotes of a comment

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/commentIdParam"

      requestBody:
        description: A JSON object containing the ID of the owner
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OwnerID"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/VotedComment"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to update downvotes on a comment
  /comments/{commentId}/votes/downvote:
    # PATCH operation
    patch:
      tags:
        - Comments and replies

      summary: Updates the downvotes of a comment

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/commentIdParam"

      requestBody:
        description: A JSON object containing the ID of the owner
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OwnerID"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/VotedComment"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to update the flag status of the comment
  /comments/{commentId}/flag:
    # PATCH operation
    patch:
      tags:
        - Comments and replies

      summary: Updates the flag status of the comment

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/commentIdParam"

      requestBody:
        description: A JSON object containing the ID of the owner
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OwnerID"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/FlaggedComment"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to create a reply to a comment
  /comments/{commentId}/replies:
    # GET operation
    get:
      tags:
        - Comments and replies

      summary: Gets all replies of a comment

      security:
        - Bearer: []

      parameters:
        - in: query
          $ref: "#/components/parameters/commentIdParam"

        - in: query
          $ref: "#/components/parameters/isFlaggedParam"

        - in: query
          $ref: "#/components/parameters/ownerIdParam"

        - in: query
          $ref: "#/components/parameters/limitParam"

        - in: query
          $ref: "#/components/parameters/sortParam"

        - in: query
          $ref: "#/components/parameters/pageParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      records:
                        type: array
                        items:
                          $ref: "#/components/schemas/Reply"
                      pageInfo:
                        $ref: "#/components/schemas/pageInfo"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # POST operation
    post:
      tags:
        - Comments and replies

      summary: Creates a new reply to a comment

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/commentIdParam"

      requestBody:
        description: A JSON object containing the reply information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReply"

      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/Reply"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to update a reply of a comment
  /comments/{commentId}/replies/{replyId}:
    # GET operation
    get:
      tags:
        - Comments and replies

      summary: Gets a reply of a comment

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/commentIdParam"

        - in: path
          $ref: "#/components/parameters/replyIdParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/Reply"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # PATCH operation
    patch:
      tags:
        - Comments and replies

      summary: Updates a reply of a comment

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/commentIdParam"

        - in: path
          $ref: "#/components/parameters/replyIdParam"

      requestBody:
        description: A JSON object containing the reply information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReply"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/UpdateReply"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    # DELETE operation
    delete:
      tags:
        - Comments and replies

      summary: Deletes a reply of a comment

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/commentIdParam"

        - in: path
          $ref: "#/components/parameters/replyIdParam"

      requestBody:
        description: A JSON object containing the email of the comment
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteReply"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/Reply"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to get all votes of a comment's reply
  /comments/{commentId}/replies/{replyId}/votes:
    # GET operation
    get:
      tags:
        - Comments and replies

      summary: Gets all votes of a comment's reply

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/commentIdParam"

        - in: path
          $ref: "#/components/parameters/replyIdParam"

        - in: path
          $ref: "#/components/parameters/voteTypeParam"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      replyId:
                        type: string
                      commentId:
                        type: string
                      votes:
                        type: array
                        items:
                          type: string

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to update upvotes of a comment's reply
  /comments/{commentId}/replies/{replyId}/votes/upvote:
    # PATCH operation
    patch:
      tags:
        - Comments and replies

      summary: Updates the upvotes of a comment's reply

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/commentIdParam"

        - in: path
          $ref: "#/components/parameters/replyIdParam"

      requestBody:
        description: A JSON object containing the ID of the owner
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OwnerID"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/VotedReply"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to update downvotes of a comment's reply
  /comments/{commentId}/replies/{replyId}/votes/downvote:
    # PATCH operation
    patch:
      tags:
        - Comments and replies

      summary: Updates the downvotes of a comment's reply

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/commentIdParam"

        - in: path
          $ref: "#/components/parameters/replyIdParam"

      requestBody:
        description: A JSON object containing the ID of the owner
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OwnerID"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/VotedReply"

        "400":
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Endpoint to update the flag status of a reply of a comment
  /comments/{commentId}/replies/{replyId}/flag:
    # PATCH operation
    patch:
      tags:
        - Comments and replies

      summary: Updates the flag status of the reply of comment

      security:
        - Bearer: []

      parameters:
        - in: path
          $ref: "#/components/parameters/commentIdParam"

        - in: path
          $ref: "#/components/parameters/replyIdParam"

      requestBody:
        description: A JSON object containing the ID of the owner
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OwnerID"

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status
                  - data
                properties:
                  message:
                    type: string
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/FlaggedReply"

        "401":
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "404":
          description: Invalid ID error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  #-------------------------------
  # Reusable schemas (data models)
  #-------------------------------
  schemas:
    MsAdmin:
      type: object
      required:
        - fullname
        - email
        - msAdminId
      properties:
        fullname:
          type: string
        email:
          type: string
        msAdminId:
          type: string

    Plans:
      type: object
      required:
        - name
        - periodWeight
      properties:
        name:
          type: string
        periodWeight:
          type: enum
        loggging:
          type: boolean
        maxLogRetentionPeriod:
          type: number
        maxRequestPerMin:
          type: number
        maxRequestPerDay:
          type: number

    CreateMSAdmin:
      type: object
      required:
        - fullname
        - email
        - password
        - role
      properties:
        fullname:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string

    Organization: # Can be referenced as '#/components/schemas/Organization'
      type: object
      required:
        - organizationId
        - organizationName
        - organizationEmail
        - secret
      properties:
        organizationId:
          type: string
        organizationName:
          type: string
        organizationEmail:
          type: string
          format: email
        secret:
          type: string

    CreateOrganization: # Can be referenced as '#/components/schemas/CreateOrganization'
      type: object
      required:
        - organizationName
        - organizationEmail
        - secret
        - adminName
        - adminEmail
        - adminPassword
      properties:
        organizationName:
          type: string
        organizationEmail:
          type: string
          format: email
        secret:
          type: string
        adminName:
          type: string
        adminEmail:
          type: string
          format: email
        adminPassword:
          type: string
          format: password

    UpdateOrganization: # Can be referenced as '#/components/schemas/UpdateOrganization'
      type: object
      properties:
        organizationName:
          type: string
        organizationEmail:
          type: string
          format: email
        secret:
          type: string

    DeleteOrganization: # Can be referenced as '#/components/schemas/DeleteOrganization'
      type: object
      properties:
        organizationId:
          type: string
        organizationName:
          type: string

    LoginOrganization: # Can be referenced as '#/components/schemas/LoginOrganization'
      type: object
      required:
        - email
        - password
        - organizationId
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          min: 8
        organizationId:
          type: string

    OrganizationResponse: # Can be referenced as '#/components/schemas/OrganizationResponse'
      type: object
      properties:
        organizationId:
          type: string
        adminId:
          type: string
        organizationToken:
          type: string

    Admin: # Can be referenced as '#/components/schemas/Admin'
      type: object
      required:
        - adminId
        - fullname
        - email
      properties:
        adminId:
          type: string
        fullname:
          type: string
        email:
          type: string
          format: email

    CreateAdmin: # Can be referenced as '#/components/schemas/CreateAdmin'
      type: object
      required:
        - organizationId
        - fullname
        - email
        - password
      properties:
        fullname:
          type: string
        organizationId:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    UpdateAdmin: # Can be referenced as '#/components/schemas/UpdateAdmin'
      type: object
      properties:
        fullname:
          type: string
        email:
          type: string
          format: email

    logging: # Can be referenced as '#/components/schemas/logging'
      type: object
      properties:
        maxLogRetentionPeriod:
          type: number
        expiryDate:
          type: string
        isActive:
          type: boolean

    dailyLimits: # Can be referenced as '#/components/schemas/dailyLimits'
      type: object
      properties:
        maxRequestPerDay:
          type: number
        expiryDate:
          type: string
        isActive:
          type: boolean

    perMinuteLimits: # Can be referenced as '#/components/schemas/perMinLimits'
      type: object
      properties:
        maxRequestPerMin:
          type: number
        expiryDate:
          type: string
        isActive:
          type: boolean

    Subscribe:
      type: object
      properties:
        planId:
          type: string
        periodCount:
          type: number

    Subscriptions: # Can be referenced as '#/components/schemas/Subscriptions'
      type: object
      properties:
        subscriptionId:
          type: string
        applicationId:
          type: string
        planId:
          type: string
        planName:
          type: string
        logging:
          type: array
          items:
            $ref: "#components/schemas/logging"
        dailyLimits:
          type: array
          items:
            $ref: "#/components/schemas/dailyLimits"
        perMinuteLimits:
          type: array
          items:
            $ref: "#/components/schemas/perMinuteLimits"
        isActive:
          type: boolean

    Log: # can be referenced as '#/components/schemas/Log'
      type: object
      properties:
        applicationId:
          type: string
        requestMethod:
          type: string
        endpoint:
          type: string
        responseCode:
          type: number
        statusMessage:
          type: string
        maxLogRetention:
          type: number
        createdAt:
          type: string
        updatedAt:
          type: string

    Application: # Can be referenced as '#/components/schemas/Application'
      type: object
      required:
        - applicationId
        - name
      properties:
        applicationId:
          type: string
        name:
          type: string

    CreateApplication: # Can be referenced as '#/components/schemas/CreateApplication'
      type: object
      required:
        - name
      properties:
        name:
          type: string

    UpdateApplication: # Can be referenced as '#/components/schemas/UpdateApplication'
      type: object
      properties:
        name:
          type: string

    Comment: # Can be referenced as '#/components/schemas/Comment'
      type: object
      required:
        - commentId
        - refId
        - ownerId
        - content
        - origin
        - numOfVotes
        - numOfUpVotes
        - numOfDownVotes
        - numOfFlags
        - numOfReplies
        - createdAt
        - updatedAt
      properties:
        commentId:
          type: string
        refId:
          type: string
        ownerId:
          type: string
        content:
          type: string
        origin:
          type: string
        numOfVotes:
          type: integer
        numOfUpVotes:
          type: integer
        numOfDownVotes:
          type: integer
        numOfFlags:
          type: integer
        numOfReplies:
          type: integer
        createdAt:
          type: string
        updatedAt:
          type: string

    pageInfo: # Can be referenced as '#/components/schemas/pageInfo'
      type: object
      required:
        - currentPage
        - totalPages
        - hasNext
        - hasPrev
        - nextPage
        - prevPage
        - pageRecordCount
        - totalRecord
      properties:
        currentPage:
          type: number
        totalPages:
          type: number
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
        nextPage:
          type: number
        prevPage:
          type: number
        pageRecordCount:
          type: number
        totalRecord:
          type: number

    CreateComment: # Can be referenced as '#/components/schemas/CreateComment'
      type: object
      required:
        - content
        - ownerId
      properties:
        refId:
          type: string
        ownerId:
          type: string
        content:
          type: string
          minLength: 1
        origin:
          type: string

    UpdateComment: # Can be referenced as '#/components/schemas/UpdateComment'
      type: object
      properties:
        content:
          type: string
          minLength: 1
        ownerId:
          type: string

    DeleteComment: # Can be referenced as '#/components/schemas/DeleteComment'
      type: object
      required:
        - ownerId
      properties:
        ownerId:
          type: string

    VotedComment: # Can be referenced as '#/components/schemas/VotedComment'
      type: object
      properties:
        commentId:
          type: string
        numOfVotes:
          type: integer
        numOfUpVotes:
          type: integer
        numOfDownVotes:
          type: integer

    FlaggedComment: # Can be referenced as '#/components/schemas/FlaggedComment'
      type: object
      properties:
        commentId:
          type: string
        numOfFlags:
          type: integer

    Reply: # Can be referenced as '#/components/schemas/Reply'
      type: object
      required:
        - replyId
        - commentId
        - ownerId
        - content
        - numOfVotes
        - numOfUpVotes
        - numOfDownVotes
        - numOfFlags
        - createdAt
        - updatedAt
      properties:
        replyId:
          type: string
        commentId:
          type: string
        ownerId:
          type: string
        content:
          type: string
        numOfVotes:
          type: integer
        numOfUpVotes:
          type: integer
        numOfDownVotes:
          type: integer
        numOfFlags:
          type: integer
        createdAt:
          type: string
        updatedAt:
          type: string

    CreateReply: # Can be referenced as '#/components/schemas/CreateReply'
      type: object
      required:
        - content
        - ownerId
      properties:
        content:
          type: string
          minLength: 1
        ownerId:
          type: string

    UpdateReply: # Can be referenced as '#/components/schemas/UpdateReply'
      type: object
      properties:
        content:
          type: string
          minLength: 1
        ownerId:
          type: string

    DeleteReply: # Can be referenced as '#/components/schemas/DeleteReply'
      type: object
      required:
        - ownerId
      properties:
        ownerId:
          type: string

    VotedReply: # Can be referenced as '#/components/schemas/VotedReply'
      type: object
      properties:
        replyId:
          type: string
        commentId:
          type: string
        numOfVotes:
          type: integer
        numOfUpVotes:
          type: integer
        numOfDownVotes:
          type: integer

    FlaggedReply: # Can be referenced as '#/components/schemas/FlaggedReply'
      type: object
      properties:
        replyId:
          type: string
        commentId:
          type: string
        numOfFlags:
          type: integer

    OwnerID: # Can be referenced as '#/components/schemas/OwnerID'
      type: object
      required:
        - ownerId
      properties:
        ownerId:
          type: string

    ErrorResponse: # Can be referenced as '#/components/schemas/Error'
      type: object
      required:
        - status
        - error
        - data
      properties:
        status:
          type: string
        error:
          type: string
        data:
          type: array
          items:
            type: string
          example: []

  #-------------------------------
  # Reusable operation parameters
  #-------------------------------
  parameters:
    organizationIdParam: # Can be referenced via '#/components/parameters/organizationIdParam'
      in: path
      name: organizationId
      description: String ID of the organization
      required: true
      schema:
        type: string

    msAdminIdParam: # Can be referenced via '#/components/parameters/msAdminIdParam'
      in: path
      name: msAdminId
      description: String ID of the Microservice Admin
      required: true
      schema:
        type: string

    planIdParam: # Can be referenced via '#/components/parameters/planIdParam'
      in: path
      name: planId
      description: String ID of the Plan
      required: true
      schema:
        type: string

    applicationIdParam: # Can be referenced via '#/components/parameters/applicationIdParam'
      in: path
      name: applicationId
      description: String ID of the application
      required: true
      schema:
        type: string

    adminIdParam: # Can be referenced via '#/components/parameters/adminIdParam'
      in: path
      name: adminId
      description: String ID of the admin
      required: true
      schema:
        type: string

    commentIdParam: # Can be referenced via '#/components/parameters/commentIdParam'
      in: path
      name: commentId
      description: String ID of the comment
      required: true
      schema:
        type: string

    replyIdParam: # Can be referenced via '#/components/parameters/replyIdParam'
      in: path
      name: replyId
      description: String ID of the reply
      required: true
      schema:
        type: string

    isFlaggedParam: # Can be referenced via '#/components/parameters/isFlaggedParam'
      in: query
      name: isFlagged
      description: Filters comments, or replies, by flagged state. If omitted, the response includes all comments, or replies, regardless of their flag state.
      schema:
        type: boolean

    voteTypeParam: # Can be referenced via '#/components/parameters/voteTypeParam'
      in: query
      name: voteType
      description: Filters comments, or replies, by vote type. If omitted, the response includes all comments, or replies, regardless of their vote type.
      schema:
        type: string
        enum:
          - upvote
          - downvote

    refIdParam: # Can be referenced via '#/components/parameters/refIdParam'
      in: query
      name: refId
      description: Filters comments, or replies, by reference's ID. If omitted, the response includes all comments, or replies, regardless of their reference ID.
      schema:
        type: string

    ownerIdParam: # Can be referenced via '#/components/parameters/ownerIdParam'
      in: query
      name: ownerId
      description: Filters comments, or replies, by owner's ID. If omitted, the response includes all comments, or replies, regardless of its owner.
      schema:
        type: string

    originParam: # Can be referenced via '#/components/parameters/originParam'
      in: query
      name: origin
      description: Filters comments, or replies, by origin. If omitted, the response includes all comments, or replies, regardless of its origin.
      schema:
        type: string

    limitParam: # Can be referenced via '#/components/parameters/limitParam'
      in: query
      name: limit
      description: Returns set number of comments, or replies perPage. If omitted, the response includes all comments, or replies, regardless of its limits.
      schema:
        type: string

    sortParam: # Can be referenced via '#/components/parameters/limitParam'
      in: query
      name: sort
      description: Sorts comments, or replies and returns in ascending or descending order. If omitted, the response includes all comments, or replies in ascending order.
      schema:
        type: string

    pageParam: # Can be referenced via '#/components/parameters/limitParam'
      in: query
      name: page
      description: Paginates comments, or replies. If omitted, the response includes all comments, or replies in one page.
      schema:
        type: string
